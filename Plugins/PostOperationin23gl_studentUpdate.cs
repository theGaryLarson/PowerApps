// <copyright file="PostOperationin23gl_studentUpdate.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author>Gary Larson</author>
// <date>7/19/2023 10:05:38 AM</date>
// <summary>Logs changes to Student records in the Student Logs table.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace CFA_Plugins.Plugins
{

    /// <summary>
    /// PostOperationin23gl_studentUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// createdby,createdon,in23gl_dob,in23gl_email,in23gl_firstname,in23gl_lastname,ownerid,owningteam,owninguser,statecode,in23gl_studentid,in23gl_university
    /// </summary>    
    public class PostOperationin23gl_studentUpdate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationin23gl_studentUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationin23gl_studentUpdate(string unsecure, string secure)
            : base(typeof(PostOperationin23gl_studentUpdate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                // TODO: Implement your custom Plug-in business logic.
                if (context.InputParameters.Contains("Target") &&
                    context.InputParameters["Target"] is Entity)
                {
                    // Obtain the target entity from the input parameters.  
                    Entity entity = (Entity)context.InputParameters["Target"];
                    // Verify that the target entity represents an in23gl_student.
                    if (entity.LogicalName == "in23gl_student")
                    {
                        // Create a new entity for the StudentLog table
                        Entity studentLog = new Entity("in23gl_studentlogs");

                        // Capture pre-image and post-image for the Update message
                        Entity preImage = (Entity)context.PreEntityImages["PreImage"];
                        Entity postImage = (Entity)context.PostEntityImages["PostImage"];
                        tracingService?.Trace("PreImage: {0}", preImage);
                        // Compare the changed attributes and copy them from the post-image if they've changed
                        if (preImage["in23gl_firstname"] != postImage["in23gl_firstname"] || preImage["in23gl_lastname"] != postImage["ingl23_lastname"] ||
                            preImage["in23gl_dob"] != postImage["in23gl_dob"] || preImage["in23gl_email"] != postImage["in23gl_email"] ||
                            preImage["in23gl_university"] != postImage["in23gl_university"])
                        {
                            studentLog["in23gl_name"] = postImage["in23gl_firstname"];
                            studentLog["in23gl_lastname"] = postImage["in23gl_lastname"];
                            studentLog["in23gl_dob"] = postImage["in23gl_dob"];
                            studentLog["in23gl_email"] = postImage["in23gl_email"];
                            studentLog["in23gl_university"] = postImage["in23gl_university"];
                            currentUserService.Create(studentLog);
                        } 
                    }
                }
            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin CFA_Plugins.Plugins.PostOperationin23gl_studentUpdate : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin CFA_Plugins.Plugins.PostOperationin23gl_studentUpdate .", ex);
            }	
        }
    }
}
